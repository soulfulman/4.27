#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
//内存的使用方式
//10创建一个变量
//int a=10;-栈区
//int g_a = 10;全局变量-静态区
// c语言可以创建变长数组c99中增加了
//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	int arr[100];
//	int i = 0;
//	for (i = 0; i < n; i++)
//	{
//		arr[i]=i;
//	}
//	for (i = 0; i < n; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}
//malloc
#include <stdlib.h>
#include <errno.h>

//int main()
//{
//	int* p = (int*)malloc(10 * sizeof(int));
//	if (p == NULL)
//	{
//		printf("%s\n", strerror(errno));
//	}
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			*(p + i) = i;
//		}
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i));
//		}
//	}
//	free(p);//当动态申请的空间不在需要时就应该换回去
//	return 0;
//
//}
//calloc 初始化返回地址吧申请的空间为0

//realloc调整动态开辟的内存大小
//1.如果p指向的空间之后有足够的空间可以追加，则直接追加，后返回p
//2.如果p指向额定空间没有足够的空间可以追加，则realloc函数会重新找一个新的内存区域开辟满足需求的区域，并且吧原来内存的数据拷贝回来
//3.得用一个新的变量来接受
//int main()
//{
//	int* ptr = (int*)malloc(20);
//	if (ptr == NULL)
//	{
//		printf("%s\n", strerror(errno));
//	}
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 5; i++)
//		{
//			*(p + i) = i;
//		}
//	}
//	//将字节20调整为40
//	int* p2 = realloc(p, 40);
//	int i = 0;
//	for (i = 5; i < 10; i++)
//	{
//		*(p2 + i) = i;
//	}
//	return 0;
//}
////对非动态开辟内存使用free释放
//void test()
//{
//	int a = 10;
//	int* p = &a;//a是栈上开辟的
//	free(p);
//}
//NULL指针解引用错误
//void test()
//{
//	int* p(int*)malloc(INT_MAX);
//	*p = 20;
//	free(p);
//}
//int main()
//{
//	int* p = (int*)malloc(40);
//	if (ptr == NULL)
//	{
//		printf("%s\n", strerror(errno));
//	}
//	int i = 0;
//	for (i = 0; i <= 10; i++)//越界访问
//	{
//		*(p + i) = i;
//	}
//	free(p);
//	p = NULL;
//	return 0;
//}
//5.对同一块动态内存多次释放
//int main()
//{
//	int* p = (int*)malloc(40);
//	if (p == NULL)
//	{
//		return 0;
//	}
//	//shiyong 释放
//	free(p);
//	p = NULL;
//	free(p);
//	return 0;
//}
////6.动态开辟内存忘记释放（内存泄漏）
//int main()
//{
//	while (1)
//	{
//		malloc(1)
//	}
//	return 0;
//}
/*void GetMemory(char** p)
{
	*p = (char*)malloc(100);
}
void Test(void)
{
	char* str = NULL;
	GetMemory(&str);
	strcpy(str, "hello world");
	printf(str);
	free(str);
}*///运行代码崩溃 程序内存泄漏 str以值传递形式给p p是函数getmemory的形参，只能函数内部有效 
//等到函数返回之后，动态开辟内存尚未释放并且无法找到，因此会内存泄漏

//int main()
//{
//	Test();
//	return 0;
//}
//方案二
char* GetMemory(char* p)
{
	p = (char*)malloc(100);
	return p;
}
void Test(void)
{
	char* str = NULL;
	str=GetMemory(str);
	strcpy(str, "hello world");
	printf(str);
	free(str);
	str = NULL;
}
int main()
{
	Test();
	return 0;
}
